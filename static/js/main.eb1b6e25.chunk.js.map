{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","search","setSearch","movies","setMovies","term","setTerm","useEffect","axios","get","then","res","data","Search","className","type","value","onChange","e","target","onClick","undefined","map","movie","key","imdbID","src","Poster","alt","Title","id","console","log","localStorage","setItem","JSON","stringify","window","location","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2QA+DeA,MAzDf,WAAgB,IAAD,EACeC,mBAAS,SADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGWJ,mBAASC,GAHpB,mBAGNI,EAHM,KAGAC,EAHA,KAsBb,OAdAC,qBAAU,WACRC,IAAMC,IAAN,oCAAuCJ,EAAvC,qBAA+DK,MAAK,SAAAC,GAElEP,EAAUO,EAAIC,KAAKC,aAErB,CAACR,IAWK,yBAAKS,UAAU,2BACd,wBAAIA,UAAU,8BAAd,aACC,yBAAKA,UAAU,WACX,yBAAKA,UAAU,iCACf,yBAAKA,UAAU,8CACf,2BAAOC,KAAK,OAAQC,MAAOf,EAASgB,SAAU,SAACC,GAAD,OAAKhB,EAAUgB,EAAEC,OAAOH,QAASF,UAAU,kBAEzF,yBAAKA,UAAU,2CACf,4BAAQA,UAAU,SAASM,QA5BrB,SAACF,GAClBZ,EAAQL,GACRC,EAAU,MA0BC,aAIJ,yBAAKY,UAAU,cACX,yBAAKA,UAAU,0BACHO,IAAXlB,EAAuBA,EAAOmB,KAAI,SAAAC,GAAK,OACpC,yBAAKT,UAAU,yBAAyBU,IAAKD,EAAME,QACnD,yBAAKX,UAAU,eACf,yBAAKY,IAAKH,EAAMI,OAAQC,IAAI,MAAMd,UAAU,kBAE5C,6BACA,yBAAKA,UAAU,aACf,4BAAKS,EAAMM,OACX,4BAAQf,UAAU,sBAAsBM,QAAS,kBA9B9CU,EA8B8DP,EAAME,OA7BvFM,QAAQC,IAAIF,GAEZG,aAAaC,QAAQ,UAAWC,KAAKC,UAAUN,SAC/CO,OAAOC,SAASC,KAAO,kBAJL,IAACT,IA8BH,gBAGI,wBAAIhB,UAAU,qBAAd,iBC3CJ0B,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.eb1b6e25.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react'\nimport \"./App.css\";\nimport axios from \"axios\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nimport MovieDetails from './components/MovieDetails';\nfunction App() {\n  const [search, setSearch] = useState(\"world\")\n  const [movies, setMovies] = useState([]);\n  const [term, setTerm] = useState(search)\n  const handleClick = (e)=>{\n     setTerm(search)\n     setSearch(\"\")\n  }\n  useEffect(()=>{\n    axios.get(`http://www.omdbapi.com/?s=${term}&apikey=b4563439`).then(res=>{\n      //console.log(res.data.Search)\n      setMovies(res.data.Search)\n    })\n  },[term])\n\n  // show Details\n  const showDetails = (id)=>{\n    console.log(id)\n   \n    localStorage.setItem(\"movieId\", JSON.stringify(id));\n    window.location.href = \"/movie-details\";\n  }\n  return (\n   \n          <div className=\"container-fluid wrapper\" >\n           <h1 className=\"text-center text-white p-2\">React App</h1>\n            <div className=\"row m-1\">  \n                <div className=\"col-lg-8 row px-2 py-3 m-auto\">\n                <div className=\"col-xs-9 col-sm-10 col-md-10 col-lg-10 p-0\">\n                <input type=\"text\"  value={search}  onChange={(e)=>setSearch(e.target.value)}  className=\"form-control\" />\n                </div>\n                <div className=\"col-xs-3 col-sm-2 col-md-2 col-lg-2 p-0\">\n                <button className=\"button\" onClick={handleClick} >Search</button>\n                </div>\n                </div>\n            </div>\n            <div className=\"row m-auto\">\n                <div className=\"col-12 row m-auto\">\n                {movies !== undefined ? movies.map(movie=>\n                    <div className=\"col-md-4 col-lg-3 card\" key={movie.imdbID}>\n                    <div className=\"card-header\">\n                    <img src={movie.Poster} alt=\"pic\" className=\"card-img-top\" />\n                    </div>\n                    <hr/>\n                    <div className=\"card-body\">\n                    <h5>{movie.Title}</h5>\n                    <button className=\"button show-details\" onClick={()=>showDetails(movie.imdbID)} >Details</button>\n                    </div>\n                    </div>\n                    ) : <h1 className=\"m-auto text-white\">No Result</h1> }\n                </div>\n            </div> \n        </div>\n  \n  )\n}\n\nexport default App\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}